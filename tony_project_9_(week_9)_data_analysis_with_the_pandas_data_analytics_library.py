# -*- coding: utf-8 -*-
"""Tony Project 9 (Week 9) Data Analysis with the Pandas Data Analytics Library.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CBx5CYeRiKeA-7FEcxHJvkLrIonhejjN

# <font color="orange"> Project: Data Analysis with the pandas Data Analytics Library  </font>

This project has these goals:
- Ingest CSV data into a Python project using the `read_csv` function provided by `pandas`.
- Create a `DataFrame` using the ingested CSV data.
- View data within a `DataFrame`, by row, by column, by cell, etc.
- Use `pandas` functions to clean your dataset, rename columns, and otherwise improve the usability of the dataset.
- Leverage `pandas` `DataFrame` and `Series` functions to answer analytical questions about the dataset.

What you should know following this project:
- How to ingest CSV data into a `pandas DataFrame`.
- How to view and understand the data stored in your `DataFrame` using various `DataFrame` properties and functions.
- You will learn how to leverage a subset of functions from the `pandas` library to analyze your dataset.

If you feel comfortable ingesting CSV data in `pandas`, viewing that data, cleaning the data and answering some questions about the dataset, then you have mastered the Data Analytics portion of Software Developer Foundations.

# Part I

We will use a file called `fortune500.csv`.
"""

!pip install -U -q PyDrive
from pydrive.auth import GoogleAuth
from pydrive.drive import GoogleDrive
from google.colab import auth
from oauth2client.client import GoogleCredentials
# Authenticate and create the PyDrive client.
auth.authenticate_user()
gauth = GoogleAuth()
gauth.credentials = GoogleCredentials.get_application_default()
drive = GoogleDrive(gauth)

# Shared link to fortune500.csv
# https://drive.google.com/file/d/1Nxs8P2MVMmOhDFwQve8rQZM2aLng_KmC/view?usp=sharing

# Shared link to fortune500_2016_2021.csv
# https://drive.google.com/file/d/1rm_p7Kq3vSxbguTNiIpRX7AIPrCrDq-Z/view?usp=sharing
id_fortune500 = '1Nxs8P2MVMmOhDFwQve8rQZM2aLng_KmC'
id_fortune500_2021 = '1rm_p7Kq3vSxbguTNiIpRX7AIPrCrDq-Z'

f500_2021_drive = drive.CreateFile({'id':id_fortune500_2021})
f500_2021_localname_csv = "fortune500_2006_2021.csv"
f500_2021_drive.GetContentFile(f500_2021_localname_csv)

f500_drive = drive.CreateFile({'id':id_fortune500})
f500_localname_csv = "fortune500.csv"
f500_drive.GetContentFile(f500_localname_csv)

print(f"Fetching {f500_2021_localname_csv} and {f500_localname_csv}")

"""- Import the `fortune500.csv` file into a `DataFrame` called `f500`."""

# Import the pandas library and give it an alias
import pandas as pd

f500 = pd.read_csv(f500_localname_csv)

print(f500)

"""- How many rows and columns are in the dataset?"""

# 25500 rows

# 5 columns

"""- Use the `head` and `tail` functions to investigate the first and last few rows of the dataset.



"""

# First few
f500.head()

# Last few
f500.tail()

"""- List the columns of the dataset.



"""

# List all the columns

f500.columns[0:5]

"""- What are the datatypes of the columns of the dataset?



"""

# Year (int)
 # Rank (int)
 # Company (object)
 # Revenue (float)
 # Profit (object)

"""Why is the datatype for the **Profit** column identified as an `object`?

Let's try to force it to be a `float` type.

Why does it fail?

Execute the next few cells.
"""

f500 = f500.astype({"Profit (in millions)": float})
# f500 = f500.astype({"Revenue (in millions)": float})

f500.dtypes

f500[ f500["Profit (in millions)"] == "N.A." ]

import numpy as np
# fillna() can be applied to a DataFrame and will replace all NaN values
# with whatever argument you pass into the fcn
# Run this cell to see the output

f500 = f500.replace("N.A.", np.NaN)
f500.fillna(0)
f500 = f500.astype({"Profit (in millions)": float})
f500.dtypes

# Note.  This operation may take long

pd.options.display.float_format = "{:,.2f}".format
f500.head()

"""- List the `Year` column.
- List the `Year` and `Company` columns.
"""

# List Year Column
f500['Year']

# List Company Column
f500['Company']

"""- Use the `tail` function to display the 492 ranked company in 2005.
- Use `iloc` to display only that row of the dataset

"""

# Tail Function
f500[f500['Year'] == 2005].tail(9)

# iloc to display row
f500.iloc[25491]

"""- Use `iloc` to display the 10th ranked company name (only) in 1955

"""

# 10th ranked company name
f500.iloc[9]['Company']

"""- Use the pandas `rename` function to rename the columns `Revenue (in millions)` to `Revenue` and `Profit (in millions)` to `Profit`.
  - **NOTE**.  Be sure to use the named parameter `inplace=True` in the `rename` function.
  - **NOTE**.  Be sure to use the named parameter `axis=1` in the `rename` function.
- Display the resulting `DataFrame` using `head()`. Did the column headers permanently change?



"""

# Rename columns
f500.rename({'Revenue (in millions)': 'Revenue','Profit (in millions)': 'Profit'}, inplace=True, axis=1)

f500.head()

"""- Display ONLY the number 1 ranked companies in the dataset."""

# ONLY number 1 ranked copmany

f500.loc[0]

"""- Display ONLY the top 2 ranked companies in each year of the dataset.

**HINT**:  Use a boolean expression that involves comparing the `Rank` column <= 2.
"""

# ONLY Top 2

f500.loc[f500['Rank'] <= 2]

"""- Display ONLY the number 1 ranked companies in the dataset AFTER the year 1999.

**REMINDER**: You need to use the `&` operator instead of the `and` operator.
"""

# ONLY 1 After 1999

f500.loc[(f500['Year'] > 1999) & (f500['Rank']== 1)]

"""- Create a _new_ dataframe, called `toprank_df`, by assigning the result of getting only the number 1 ranked companies.
- Use `head()` to check the first 5 rows of this `DataFrame`.
- Now use the `pandas` `sum()` function to display the total profits of all the #1 ranked companies.
"""

# New dataframe
toprank_df = f500.loc[(f500['Year'] > 1999) & (f500['Rank']== 1)]

toprank_df.head()

toprank_df.sum()

"""- Find the VALUE of the highest Profit company in 2005?

"""

# Highes Profit in 2005
toprank_df

toprank_df['Profit'].idxmax()
toprank_df.iloc[5]

"""- Sum the `Revenue` of the all the Fortune 500 companies from year `1980`."""

# Sum the Revenue from year 1980

f500.loc[f500['Year']== 1980].sum()

"""## Use the `groupby()` Function

- What is the total revenue of all `n-ranked` companies from 1955 through 2005?
"""

#f500.loc[f500['Year'] >= 1955]

f500.groupby('Rank')['Revenue'].sum()

"""- Find the *year by year* maximimum profits of the Fortune 500 companies."""

# Year by Year maximum profits

f500.groupby('Year')['Profit'].max()

"""# Part II

We will use a file called `fortune500_2006_2021.csv`. This file has data for Fortune 500 companies from 2006 through 2021.

Let's append that data to the existing Fortune 500 data.
"""

# Read the new CSV into a DataFrame
import pandas as pd

fd_2006_2001_filename_csv = "fortune500_2006_2021.csv"


f500 = pd.read_csv(f500_localname_csv)

f500_2006 = pd.read_csv(fd_2006_2001_filename_csv)

# Append data to f500
f500_all = f500.append(f500_2006, ignore_index=True)

# All data
f500_all

"""# Use the new, combined dataset to answer these questions:

- List all the #1 ranked Fortune 500 companies
- List the #1 ranked companies AFTER year 2015.
  - **HINT**: You will need to use the boolean `&` operator.
- Which company is listed in the Fortune 500 the most times in this dataset? **Hint**:  Use `value_counts`.
- What is the highest `Profit` of any company Fortune 500 company through 2021?
  - Which **company** has the highest `Profit` through 2021?
  - **HINT**: `max()` gives the highest value. `idxmax()` gives the index of the row that has that highest value. Once you have the `index` of the highest value, you can use `iloc`.
"""

# #1 Ranked Fortune 500 companies
f500_all.loc[f500_all['Rank']== 1]

# #1 Ranked AFTER 2015
f500_all.loc[(f500_all['Rank']== 1) & (f500_all['Year'] > 2015)]

# Listed Most Times
f500_all["Company"].value_counts()

# f500_all = f500_all.astype({"Revenue": float})
# f500_all.dtypes

f500_all['Revenue'].str.isnumeric()
f500_all.dtypes

# Company Highest Profit (kept getting error checked with T.A as well)
f500_all['Revenue'].max()

f500_all.iloc[f500_all['Revenue'].idxmax()]

